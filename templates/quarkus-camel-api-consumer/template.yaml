apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: quarkus-camel-api-consumer-template
  title: Quarkus Camel REST consumer
  description: Create a simple REST consumer using Camel with Quarkus
spec:
  owner: service@example.com
  type: service
  
  parameters:
    - title: API consumer parameters
      required:
        - component_id
        - owner
        - java_group_id
        - java_package
        - application
        - description
        - cluster_domain
      properties:
        component_id:
          title: Name
          type: string
          description: Unique name of the component
        java_group_id:
          title: Group Name
          type: string
          description: Name for the group id, eg. (backstage in my.group)
        java_package:
          title: Java Package Name
          type: string
          description: Name for the java package. eg (package in my.package.name)
        description:
          title: Description
          type: string
          description: Help others understand what this component does
        deployment:
          title: Select the deployment strategy
          type: string
          default: jvm
          enum:
            - jvm
            - legacy-jar
            - native
            - native-micro
          enumNames:
            - 'JVM'
            - 'JVM with legacy-jar'
            - 'Native'
            - 'Native Micro'
        owner:
          title: Owner
          type: string
          description: Owner of the component
          ui:field: OwnerPicker
          ui:options:
            allowedKinds: 
              - Group
        application:
          title: System
          type: string
          description: System to which this Component belongs
          ui:field: OwnedEntityPicker
          ui:options:
            allowedKinds:
            - System
        apis:
          title: APIs
          type: array
          description: The APIs being consumed
          ui:field: MultiEntityPicker
          ui:options:
            catalogFilter:
              - kind: API
        service_registry_provider_url:
          title: Service Registry Provider URL
          type: string
          description: Apicurio Registry Host
          default: http://apicurioregistry.apps.cluster-example.com
        service_registry_group_id:
          title: Service Registry Group ID
          type: string
          default: com.redhat
        cluster_domain:
          title: Cluster domain
          type: string
          description: Cluster domain (like apps.example.com)   

  steps:
    - id: template
      name: render component source code
      action: fetch:template
      input:
        url: ./skeleton
        copyWithoutRender: []
        values:
          component_id: ${{ parameters.component_id }}
          description: ${{ parameters.description }}
          artifact_id: ${{ parameters.component_id }}
          folder_java_package: ${{ parameters.java_package | replace('.', '/') }}
          java_group_id: ${{ parameters.java_group_id }}
          java_package: ${{ parameters.java_package }}
          owner: ${{ parameters.owner }}
          destination: https://github.com/smongiar/${{ parameters.application.split("/")[1] }}-${{ parameters.component_id }}-service
          project_slug: smongiar/${{ parameters.application.split("/")[1] }}-${{ parameters.component_id }}-service
          application: ${{ parameters.application }}
          service_id: ${{ parameters.component_id }}-service
          system_label: system=${{ parameters.application.split("/")[1] }}
          apis: ${{ parameters.apis }}
          service_registry_provider_url: ${{ parameters.service_registry_provider_url }}
          service_registry_group_id: ${{ parameters.service_registry_group_id }}

    - id: publish
      name: publish component source repository
      action: publish:github
      input:
        allowedHosts: ['github.com']
        description: This is ${{ parameters.component_id }}
        repoUrl: github.com?repo=${{ parameters.application.split("/")[1] }}-${{ parameters.component_id }}-service&owner=smongiar
        repoVisibility: public
        defaultBranch: main
        deleteBranchOnMerge: true
        protectDefaultBranch: false

    - id: webhook
      name: webhook creation source repository
      action: github:webhook
      input: 
        repoUrl: github.com?repo=${{ parameters.application.split("/")[1] }}-${{ parameters.component_id }}-service&owner=smongiar
        webhookUrl: https://webhook-${{ parameters.application.split("/")[1] }}-${{ parameters.component_id }}-el.${{ parameters.cluster_domain }}
        webhookSecret: 'mysecret'
        events: ['push']
        active: true
        contentType: 'json'
        insecureSsl: false     

    - id: register
      name: Register Component
      action: catalog:register
      input:
        repoContentsUrl: '${{ steps.publish.output.repoContentsUrl }}'
        catalogInfoPath: '/catalog-info.yaml'

    - id: template-system-pull-request
      name: render system pull request
      action: fetch:template
      input:
        url: ./system
        copyWithoutRender: []
        values:
          component_id: ${{ parameters.component_id }}
          description: ${{ parameters.description }}
          artifact_id: ${{ parameters.component_id }}
          folder_java_package: ${{ parameters.java_package | replace('.', '/') }}
          java_group_id: ${{ parameters.java_group_id }}
          java_package: ${{ parameters.java_package }}
          owner: ${{ parameters.owner }}
          application: ${{ parameters.application }}
          organization: smongiar
          team: ${{ parameters.owner }}
          repo_id: ${{ parameters.component_id }}
        targetPath: ./system-gitops

    - id: pull-request
      name: Open PR to System
      action: publish:github:pull-request
      input:
        repoUrl: github.com?repo=${{ parameters.application.split("/")[1] }}-system&owner=smongiar
        branchName: ${{ parameters.component_id }}-component
        title: add ${{ parameters.component_id }} component
        description: add ${{ parameters.component_id }} component
        sourcePath: ./system-gitops

  output:
    links:
      - title: Repository
        url: ${{ steps.publish.output.remoteUrl }}
      - title: Open in catalog
        icon: catalog
        entityRef: ${{ steps.register.output.entityRef }}
